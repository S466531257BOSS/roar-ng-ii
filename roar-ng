#!/bin/sh

# /usr/bin/roar-ng: a distribution building framework

# include roar-ng's common functions file
if [ -f ./common ]
then
	. ./common
else
	. /usr/share/roar-ng/common
fi

#############
# constants #
#############

# the usage message
USAGE="Usage: roar-ng {setup|download|extract|cleanup}
       roar-ng build TYPE DEST
       roar-ng package [NAME]

Build a GNU/Linux distribution.
"

#########
# paths #
#########

# the BusyBox executable path
BUSYBOX_PATH="$VAR_PREFIX/rootfs/usr/bin/busybox"

# the kernel image path
KERNEL_IMAGE_PATH="boot/vmlinuz"

# the initramfs file name
INITRAMFS_FILE_NAME="initrd.gz"

# the root file system image file name
ROOT_FS_FILE_NAME="rootfs.sfs"

####################
# package building #
####################

# virtual file systems and directories to bind to the host's before calling
# chroot
CHROOT_VIRTUAL_FS="proc sys dev"

# files to copy into the chroot environment
CHROOT_FILES="etc/resolv.conf"

# the prefix for package building operations
BUILD_PREFIX="tmp"

# the prefix for package build results
BUILD_RESULT_PREFIX="usr/src"

###########
# options #
###########

# the mksquashfs flags used
MKSQUASHFS_OPTIONS="-comp xz -Xbcj x86 -b 512K -no-exports"

# the gzip flags used to compress the initramfs
GZIP_OPTIONS="--best"

#########################
# package list routines #
#########################

# get_package_list()
# purpose: returns the package list
# input  : -
# output : the package list
get_package_list() {
	# filter comments and empty lines
	echo "$DISTRO_PACKAGES" | grep -v -e ^# -e ^\$
}

# get_package_group_name()
# purpose: returns the name field of a package group
# input  : a package group
# output : the package group name
get_package_group_name() {
	echo "${1%%|*}"
}

# get_package_group_names()
# purpose: returns all package group names
# input  : -
# output : all package group names
get_package_group_names() {
	get_package_list | cut -f 1 -d \|
}
# get_package_group_distro()
# purpose: receives a package group entry and returns the distribution fields
# input  : a package group entry
# output : the distribution name, version and architecture
get_package_group_distro() {
	echo "$1" | cut -f 3-5 -d \| | sed s/\|/\ /g
}

# get_package_group_members()
# purpose: lists the packages contained in a package group
# input  : a package group entry
# output : a list of the packages contained within the package group
get_package_group_members() {
	echo "$1" | cut -f 2 -d \| | sed s/,/\ /g
}

# get_used_distros()
# purpose: determines which distributions are used in the package list
# input  : -
# output : a list of distributions (name, version and architecture) used in the
#          package list
get_used_distros() {
	# do not use get_package_group_distro() - invoking both cut and sed is slow
	get_package_list | awk -F \| '{print $3" "$4" "$5}' | sort | uniq
}

####################
# package download #
####################

# download_packages()
# purpose: a wrapper around download_package() which downloads all packages
#          specified in the package list
# input  : -
# output : -
download_packages() {
	# create the output directory
	if [ ! -d "$VAR_PREFIX/package" ]
	then
		mkdir "$VAR_PREFIX/package"
		[ 0 -ne $? ] && return 1
	fi

	# for each package group, switch to its distribution and download all
	# member packages
	get_package_list | while read entry
	do
		name="$(get_package_group_name "$entry")"
		packages="$(get_package_group_members "$entry")"
		distribution="$(get_package_group_distro "$entry")"

		# set the current distribution
		set_current_distro $distribution
		[ 0 -ne $? ] && return 1

		for package in $packages
		do
			# find the package entry
			echo "Searching for $package ($distribution)"
			package_entry="$(find_package $package)"
			if [ -z "$package_entry" ]
			then
				echo "Error: failed to locate \"$package\" ($distribution)".
				return 1
			fi

			# get the package file name
			file_name="$(get_package_path "$package_entry")"
			file_name="${file_name##*/}"

			# if the package was already downloaded, do nothing
			if [ -e "$VAR_PREFIX/package/$file_name" ]
			then
				echo "$file_name was already downloaded; skipping"
				continue
			fi

			# download the package
			download_package "$package_entry" "$VAR_PREFIX/package/$file_name"
			[ 0 -ne $? ] && return 1
		done
	done

	return 0
}

######################
# package extraction #
######################

# extract_packages()
# purpose: a wrapper around extract_package_group() which downloads all packages
#          specified in the package list
# input  : -
# output : -
extract_packages() {
	# create the output directory
	if [ ! -d "$VAR_PREFIX/extracted_package" ]
	then
		mkdir "$VAR_PREFIX/extracted_package"
		[ 0 -ne $? ] && return 1
	fi

	# create a temporary file
	package_paths="$(mktemp -u)"

	# for each package group, switch to its distribution and extract all
	# member packages
	get_package_list | while read entry
	do
		name="$(get_package_group_name "$entry")"
		packages="$(get_package_group_members "$entry")"
		distribution="$(get_package_group_distro "$entry")"

		# if the package group was already extracted, skip it
		if [ -d "$VAR_PREFIX/extracted_package/$name" ]
		then
			echo "$name was already extracted, skipping"
			continue
		fi

		# set the current distribution
		set_current_distro $distribution
		[ 0 -ne $? ] && return 1

		for package in $packages
		do
			# find the package entry
			echo "Searching for $package ($distribution)"
			package_entry="$(find_package $package)"
			if [ -z "$package_entry" ]
			then
				print_error "failed to find \"$package\" ($distribution)".
				rm -f $package_paths
				return 1
			fi

			# get the package file name
			package_file_name="$(get_package_path "$package_entry")"
			package_file_name="${package_file_name##*/}"

			echo "$VAR_PREFIX/package/$package_file_name" >> $package_paths
		done

		# extract the packages
		extract_package_group $name \
		                      "$VAR_PREFIX/extracted_package/$name" \
		                      < $package_paths
		result=$?

		# remove the temporary file
		rm -f $package_paths

		# upon failure, remove the destination directory
		if [ 0 -ne $result ]
		then
			print_error "failed to extract the packages in \"$name\""
			rm -rf "$VAR_PREFIX/extracted_package/$name"
			return 1
		fi
	done

	return 0
}

#####################################
# bootable media image construction #
#####################################

# _build_module()
# purpose: builds a module of the bootable media image
# input  : the module name, destination directory and the list of packages
# output : -
_build_module() {
	echo "$1"

	# create the destination directory
	if [ ! -d "$2" ]
	then
		mkdir "$2"
		[ 0 -ne $? ] && return 1
	fi

	# create a temporary file which will contain the post-installation script
	post_install="$(mktemp -u -p "$2")"

	(
		# add the module's skeleton
		echo "$INSTALL_PREFIX/skeleton/$1"

		# create a list of all package directories
		for package in $3
		do
			echo "$VAR_PREFIX/extracted_package/$package"
		done
	) | while read path
	do
		echo "  $path"

		# copy the contents of each directory to the destination
		cp -L -a --remove-destination "$path"/* "$2"
		[ 0 -ne $? ] && return 1

		# if a post-installation script exists, merge it with the previous ones
		[ ! -f "$2/$POST_INSTALL_SCRIPT_FILE_NAME" ] && continue
		cat "$2/$POST_INSTALL_SCRIPT_FILE_NAME" >> "$post_install"
		echo >> "$post_install"
		rm -f "$2/$POST_INSTALL_SCRIPT_FILE_NAME"
		[ 0 -ne $? ] && return 1
	done

	# if at least one post-installation script exists, run it
	[ ! -f "$post_install" ] && return 0
	execute_and_delete_script "$post_install"
	return $?
}

# _build_initramfs()
# purpose: builds the initramfs
# input  : the extracted initramfs contents directory and the destination path
# output : -
_build_initramfs() {
	# copy the initramfs skeleton
	_build_module "initramfs" "$1" ""
	if [ 0 -ne $? ]
	then
		print_error "failed to build the initramfs"
		return 1
	fi

	# remove .gitignore files
	find "$1" -name .gitignore -type f -delete
	[ 0 -ne $? ] && return 1

	# add BusyBox to the initramfs
	install -D -m 4755 "$BUSYBOX_PATH" "$1/bin/busybox"
	if [ 0 -ne $? ]
	then
		print_error "failed to build the initramfs"
		return 1
	fi

	# create and compress the initramfs
	cd "$1"
	find . | cpio -o -H newc | gzip $GZIP_OPTIONS > "$2"
	exit_code=$?
	cd "$BASE_DIR"
	if [ 0 -ne $? ]
	then
		print_error "failed to create the initramfs"
		return 1
	fi

	# if AdvanceCOMP is installed, recompress the initramfs
	[ -z "$(which advdef)" ] && return 0
	advdef -z4 "$2"
	if [ 0 -ne $? ]
	then
		print_error "failed to recompress the initramfs"
		return 1
	fi

	return 0
}

# _install_roar_ng()
# purpose: installs roar-ng II in a directory
# input  : the installation path
# output : -
_install_roar_ng() {
	# create the installation directory
	mkdir -p "$1/usr/share/roar-ng"
	[ 0 -ne $? ] && return 1

	# install the common routines file
	install -m 755 common "$1/usr/share/roar-ng/common"
	[ 0 -ne $? ] && return 1

	# install roar-ng
	install -D -m 755 roar-ng "$1/usr/bin/roar-ng"
	[ 0 -ne $? ] && return 1

	# install plug-ins, skeletons and support files
	for i in distro media package-templates skeleton
	do
		cp -ar $i "$1/usr/share/roar-ng"
		[ 0 -ne $? ] && return 1
	done

	# install the configuration
	cp -ar conf "$1/etc/roar-ng"
	[ 0 -ne $? ] && return 1

	# install the README
	install -D -m 644 README "$1/usr/share/doc/roar-ng/README"
	[ 0 -ne $? ] && return 1

	# install the license and the list of authors
	install -D -m 644 COPYING "$1/usr/share/doc/legal/roar-ng/COPYING"
	[ 0 -ne $? ] && return 1
	install -D -m 644 AUTHORS "$1/usr/share/doc/legal/roar-ng/AUTHORS"
	[ 0 -ne $? ] && return 1
	install -D -m 644 THANKS "$1/usr/share/doc/legal/roar-ng/THANKS"
	[ 0 -ne $? ] && return 1

	return 0
}

# _build_rootfs()
# purpose: builds the root file system Squashfs image
# input  : the extracted root file system contents directory, the destination
#          path and the kernel image path
# output : -
_build_rootfs() {
	# copy the root file system packages and skeleton
	_build_module "rootfs" "$1" "$(get_package_group_names)"
	if [ 0 -ne $? ]
	then
		print_error "failed to build the root file system"
		return 1
	fi

	# install roar-ng II within the root file system
	_install_roar_ng "$1"
	[ 0 -ne $? ] && return 1

	# create distro.list, containing the list of distributions used by
	# roar-ng II
	get_used_distros > "$1/etc/roar-ng/distro.list"

	# create /etc/hostname
	echo -n "$DISTRO_NICKNAME" > "$1/etc/hostname"

	# replace DISTRO_NAME and DISTRO_VERSION with their values, in /etc/issue
	# and /etc/motd
	for i in issue motd
	do
		sed -e s~DISTRO_NAME~"$DISTRO_NAME"~g \
		    -e s~DISTRO_VERSION~"$DISTRO_VERSION"~g \
		    -e s~DISTRO_HOMEPAGE~"$DISTRO_HOMEPAGE"~g \
		    -i "$1/etc/$i"
	done

	# populate /root with the home directory skeleton
	[ -d "$1/root" ] && rm -rf "$1/root"
	cp -a "$1/etc/skel" "$1/root"
	chown -R 0:0 "$1/root"
	chmod 600 "$1/root"
	[ 0 -ne $? ] && return 1

	# remove the kernel image from the root file system
	mv -f "$1/$KERNEL_IMAGE_PATH" "$3"
	[ 0 -ne $? ] && return 1

	# remove .gitignore files
	find "$1" -name .gitignore -type f -delete
	[ 0 -ne $? ] && return 1

	# create a Squashfs image
	mksquashfs "$1" "$2" $MKSQUASHFS_OPTIONS
	if [ 0 -ne $? ]
	then
		print_error "failed to create the root file system image"
		return 1
	fi

	return 0
}

# build_bootable_media_image()
# purpose: builds a bootable media image
# input  : the bootable media type and the output file path
# output : -
build_bootable_media_image() {
	# make sure the given media is supported
	[ ! -f "$INSTALL_PREFIX/media/$1" ] && return 1

	# create a root directory for the bootable media contents
	if [ -d "$VAR_PREFIX/media" ]
	then
		rm -rf "$VAR_PREFIX/media"/*
		[ 0 -ne $? ] && return 1
	else
		mkdir "$VAR_PREFIX/media"
		[ 0 -ne $? ] && return 1
	fi

	# create /boot
	mkdir "$VAR_PREFIX/media/boot"
	[ 0 -ne $? ] && return 1

	# build the root file system image
	_build_rootfs "$VAR_PREFIX/rootfs" \
	              "$VAR_PREFIX/media/boot/$ROOT_FS_FILE_NAME" \
	              "$VAR_PREFIX/media/$KERNEL_IMAGE_PATH"
	[ 0 -ne $? ] && return 1

	# build the initramfs
	_build_initramfs "$VAR_PREFIX/initramfs" \
	                 "$VAR_PREFIX/media/boot/$INITRAMFS_FILE_NAME"
	[ 0 -ne $? ] && return 1

	# build a bootable media image
	. "$INSTALL_PREFIX/media/$1"
	build_media_$1 "$VAR_PREFIX/media" "$2"
	if [ 0 -ne $? ]
	then
		print_error "failed to create the bootable media image"
		return 1
	fi

	return 0
}

####################
# package building #
####################

# _set_up_chroot()
# purpose: sets up a chroot environment within a built distribution
# input  : the root file system path
# output : -
_set_up_chroot() {
	# bind all virtual file systems
	for i in $CHROOT_VIRTUAL_FS
	do
		mount --bind /$i "$1/$i"
		[ 0 -ne $? ] && return 1
	done

	# copy required files into the chroot environment
	for i in $CHROOT_FILES
	do
		cp /$i "$1/$i"
		[ 0 -ne $? ] && return 1
	done

	return 0
}

# _clean_up_chroot()
# purpose: cleans up the chroot environment created using _set_up_chroot()
# input  : the root file system path
# output : -
_clean_up_chroot() {
	# assume everything succeeds
	is_success=1

	# unbind all virtual file systems
	for i in $CHROOT_VIRTUAL_FS
	do
		# if no file system is mounted - the binding loop was stopped due a
		# failure - just try to unbind the next
		mountpoint -q "$1/$i"
		[ 1 -eq $? ] && continue

		umount "$1/$i"
		[ 0 -ne $? ] && is_success=0
	done

	[ 0 -eq $is_success ] && return 1
	return 0
}

# _build_package()
# purpose: builds a package within the result distribution; must run after
#          _set_up_chroot()
# input  : the chroot environment path and the package name
# output : -
_build_package() {
	# create a temporary directory for the building operation
	build_dir="$(mktemp -d -p "$1/$BUILD_PREFIX" "$2XXXXXX" | sed s~"$1"~~)"

	# if the sources were downloaded already, copy them to the build directory
	if [ -d "$VAR_PREFIX/source/$2" ]
	then
		cp -f "$VAR_PREFIX/source/$2"/* "$1/$build_dir"
		[ 0 -ne $? ] && return 1
	else
		mkdir -p "$VAR_PREFIX/source/$2"
		[ 0 -ne $? ] && return 1
	fi

	# call buildpkg to download the package sources
	chroot "$1" \
	  bin/sh -c "cd $build_dir; /usr/sbin/buildpkg download /var/packages/$2.sh"
	[ 0 -ne $? ] && return 1

	# copy the sources to the sources directory, so they don't have to be
	# downloaded again next time
	cp -f "$1/$build_dir"/* "$VAR_PREFIX/source/$2"
	[ 0 -ne $? ] && return 1

	# build the package
	chroot "$1" \
	    /bin/sh -c "cd $build_dir; /usr/sbin/buildpkg build /var/packages/$2.sh"
	[ 0 -ne $? ] && return 1

	# if the package was already built, remove the old build
	if [ -e "$1/$BUILD_RESULT_PREFIX/$2" ]
	then
		rm -rf "$1/$BUILD_RESULT_PREFIX/$2"
		[ 0 -ne $? ] && return 1
	fi

	# if the compilation succeeded, move the directory to the build results
	# directory
	mv "$1/$build_dir" "$1/$BUILD_RESULT_PREFIX/$2"
	[ 0 -ne $? ] && return 1

	# copy the package to the binary packages directory
	cp -f "$1/$BUILD_RESULT_PREFIX/$2"/*.rxz "$VAR_PREFIX/package"
	[ 0 -ne $? ] && return 1

	# install the package within the chroot environment, using hpm
	chroot "$1" /bin/sh -c "hpm-install /$BUILD_RESULT_PREFIX/$2/*.rxz $2"
	[ 0 -ne $? ] && return 1

	return 0
}

# _show_usage()
# purpose: shows the usage message and exits
# input  : -
# output : -
_show_usage() {
	echo "$USAGE"
	exit 1
}

case "$1" in
	setup)
		[ 1 -ne $# ] && _show_usage
		get_used_distros | update_package_database
		exit $?
		;;

	download)
		[ 1 -ne $# ] && _show_usage
		download_packages
		exit $?
		;;

	extract)
		[ 1 -ne $# ] && _show_usage
		extract_packages
		exit $?
		;;

	build)
		[ 3 -ne $# ] && _show_usage
		build_bootable_media_image "$2" "$3"
		exit $?
		;;

	package)
		[ 2 -ne $# ] && _show_usage

		# make sure there is a build script for the specified package
		[ ! -f "$INSTALL_PREFIX/skeleton/rootfs/var/packages/$2.sh" ] && \
																 _show_usage

		# prepare a chroot environment
		_set_up_chroot "$VAR_PREFIX/rootfs"
		if [ 0 -ne $? ]
		then
			print_error "failed to set up a chroot environment"
			exit 1
		fi

		# attempt to build the package
		_build_package "$VAR_PREFIX/rootfs" "$2"
		exit_code=$?

		# clean up
		_clean_up_chroot "$VAR_PREFIX/rootfs"
		if [ 0 -ne $? ]
		then
			print_error "failed to clean up the chroot environment"
			exit 1
		fi

		if [ 0 -ne $exit_code ]
		then
			print_error "failed to build $2"
			exit 1
		else
			exit 0
		fi
		;;

	cleanup)
		for i in initramfs rootfs media
		do
			[ ! -d "$VAR_PREFIX/$i" ] && continue
			echo "$i"
			rm -rf "$VAR_PREFIX/$i"
			if [ 0 -ne $? ]
			then
				print_error "failed to remove $VAR_PREFIX/$i"
				exit 1
			fi
		done

		exit 0
		;;

	*)
		_show_usage
		;;
esac