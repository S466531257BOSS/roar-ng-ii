                                         ___ ___
 _ __ ___   __ _ _ __      _ __   __ _  |_ _|_ _|
| '__/ _ \ / _` | '__|____| '_ \ / _` |  | | | |
| | | (_) | (_| | | |_____| | | | (_| |  | | | |
|_|  \___/ \__,_|_|       |_| |_|\__, | |___|___|
                                 |___/

############
# Overview #
############

roar-ng II is the next generation of roar-ng, a GNU/Linux distribution building
system. It is able to build versatile distributions, able to act both as
traditional desktop ones and "live" systems.

It is designed to be generic, extensible and efficient. It is the result of
a complete redesign of roar-ng and thrives to be more flexible and smarter:
 - It supports multiple distributions, architectures and multiple versions of
   the same distribution in parallel.
 - Support for distributions is provided by a smart plug-in system.
 - roar-ng II itself can be installed as a regular package and "propagate" into
   the distributions built by it, to make them truly self-hosting.
 - It is able to build packages from source, within distributions built by it,
   in a clean way.

Distributions currently supported by roar-ng II are:
  - Debian (http://www.debian.org/) and derivatives:
      - Ubuntu (http://www.ubuntu.com/)
      - Linux Mint (http://www.linuxmint.com/)
      - Raspbian (http://www.raspbian.org/)
  - RPM-based distributions:
      - Mageia (http://www.mageia.org/)
      - Fedora (http://fedoraproject.org/)
      - CentOS (https://www.centos.org/)
      - openSUSE (http://www.opensuse.org/)
  - Arch Linux (http://www.archlinux.org/)
  - Slackware (http://www.slackware.com/)
  - Puppy Linux (http://www.puppylinux.org/) and derivatives:
      - Slacko
      - Wary (http://bkhome.org/wary/)

All processor archietcures and all versions of these distributions are supported
in parallel.

################
# Dependencies #
################

roar-ng II does not have any exotic dependencies: it relies on traditional tools
found in most GNU/Linux distributions, such as awk, sed, wget and gzip
(http://www.gzip.org/).

The only dependency of roar-ng II which may be problematic is squashfs-tools
(http://squashfs.sourceforge.net/), which must be at least version of 4.1.

In addition to run-time dependencies, distributions built using roar-ng II must
include the following packages:
  - The Linux kernel (http://www.kernel.org/), with:
      - Aufs (http://aufs.sourceforge.net/) and Squashfs
        (http://squashfs.sourceforge.net), built-in.
      - Drivers for all media types and file systems the distribution should be
        be able to boot from, built-in.
    Bear in mind that roar-ng II is tested against a specific version of the
    kernel; its configuration is located at /usr/src/linux.
  - udev.
  - BusyBox (http://www.busybox.net/), with init.

#########################
# Optional Dependencies #
#########################

In addition to the minimum requirements, roar-ng II is able to take advantage
of extra, third-party tools:
  - aria2 (http://aria2.sourceforge.net/), for parallel package download. If it
    is unavailable, all package downloads are performed through a single mirror.
  - AdvanceCOMP (http://advancemame.sourceforge.net/), for better compression of
    the initramfs. Without it, it will be a bit bigger.
  - exploderpm, part of src2pkg (http://www.src2pkg.net/), for extraction of RPM
    packages originating in openSUSE and Mageia. It is needed due to limitations
    in many implementations of rpm2cpio: it is a very lightweight and
    architecture-independent solution for RPM package extraction.

#########
# Usage #
#########

roar-ng is an all-in-one script which exposes all roar-ng II's functionality. It
recevies the following command-line arguments:
  - check    : performs sanity checks of the configuration.
  - setup    : downloads and processes the package lists of all used
               repositories.
  - download : downloads all binary packages.
  - extract  : extracts the downloaded binary packages.
  - build    : builds a bootable image of the distribution; receives two
               additional command-line arguments: the bootable media type and
               the output file path. Intermediate directories are kept, for use
               with "package".
  - package  : builds a binary package from source, within the distribution;
               must run after "build". In this mode, roar-ng II needs sufficient
               permissions to run mount and chroot.
  - cleanup  : cleans up after "build" by removing intermediate directories.

In a typical session, roar-ng II is executed with "setup", "download", "extract"
and "build".

######################
# Design Philosophy  #
######################

  - Code should be short, clear, well-documented and optionally, reusable.
  - Code should be written with long-term maintainance in mind. If the cost of
    maintaining it is high, it cannot be become an integral part of roar-ng II.
  - A new feature should be added in the cleanest and most generic way. For
    example, instead of adding support for booting from one exotic file system,
    providing a generic compatibility layer for it and other, similar file
    systems, is preferred.
  - If a feature isn't useful enough and harms roar-ng II's design or
    simplicity, it should be dropped.

################
# Boot Process #
################

The boot process of distributions built using roar-ng II is very simple and
straightforward:
  - The kernel is loaded by the boot loader and unpacks the initramfs.
  - The init script mounts the root partition, according to the "root" boot
    code.
  - The root file system, an image under the partition (rootfs.sfs), is mounted.
  - A layered file system is mounted: it consists of the root file system image
    (which is read-only) and either the root partition or a tmpfs file system
    (which is writeable).
  - The layered file system becomes the root file system (e.g /).
  - Another init script is executed: it configures the operating system and
    starts vital services.

Typically, under low-end x86 hardware, the whole process consumes between 5 and
8 seconds when booting from a slow USB 2.0 flash drive.
