# include the configuration file
. $CONF_DIR/distro/arch

# arch_get_architecture_aliases()
# purpose: translates an architecture name to the distribution's nicknames
# input  : an architecture name
# output : the distribution's names for the architecture, ordered by accuracy
arch_get_architecture_aliases() {
	case "$1" in
		x86_64|amd64)
			echo "x86_64 any"
			;;
		x86|i?86)
			echo "i686 any"
			;;
	esac
}

# arch_download_package_list()
# purpose: downloads the distribution's package list
# input  : the package list URL and the destination path
# output : -
arch_download_package_list() {
	# download the package details tarball
	download_file "$1" "$2"
	[ 0 -ne $? ] && return 1

	# decompress the tarball
	decompress_file "$2"
}

# arch_convert_package_list()
# purpose: converts a repository's package list to roar-ng's common format
# input  : the package list path and the repository name
# output : a package list in roar-ng's format
arch_convert_package_list() {
	# create a temporary directory
	temp_dir="$(mktemp -d)"

	# extract the tar archive
	extract_tarball "$1" $temp_dir
	[ 0 -ne $? ] && return 1

	# for each package, pass its description and dependencies to standard
	# output; this is required to force their order (since tar -O might change
	# it)
	for package in $temp_dir/*
	do
		cat $package/desc $package/depends
		echo PACKAGE_END
	done | \
	awk -v distro="$distro_name" \
	    -v distro_version="$distro_version" \
	    -v repo="$2" '

	    function print_entry() {
	    	printf("%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
	    	       names,
	    	       version,
	    	       revision,
	    	       architecture,
	    	       file_name,
	    	       description,
	    	       distro,
	    	       distro_version,
	    	       repo,
	    	       dependencies);
	    }

	    {
	    	if ("%FILENAME%" == $1) {
	    		# print the previous packages entry
	    		if ("" != file_name) {
	    			print_entry();
	    		}
	    		dependencies = "";
	    		getline file_name;
	    	} else {
	    		if ("%NAME%" == $1) {
	    			getline names
	    		} else {
	    			if ("%VERSION%" == $1) {
	    				getline line;
	    				split(line, line_split, "-");
	    				version = line_split[1];
	    				revision = line_split[2];
	    			} else {
	    				if ("%DESC%" == $1) {
	    					getline description
	    				} else {
	    					if ("%ARCH%" == $1) {
	    						getline architecture;
	    					} else {
	    						if ("%DEPENDS%" == $1) {
	    							getline dependency;
	    							do {
	    								sub(/[<>=].*/, "", dependency);
	    								dependencies = \
	    								            (dependencies","dependency);
	    								getline dependency;
	    							} while ("" != dependency);

	    							# remove the leading comma
	    							sub(/^,/, "", dependencies);
	    						} else {
	    							if ("%PROVIDES%" == $1) {
	    								getline name;
	    								do {
	    									sub(/[<>=].*/, "", name);
	    									names = names","name;
	    									getline name;
	    								} while ("" != name);
	    							} else {
	    								if ("PACKAGE_END" == $1) {
	    									print_entry();
	    									file_name = ""
	    								}
	    							}
	    						}
	    					}
	    				}
	    			}
	    		}
	    	}
	    }

	    END {
	    	print_entry()
	    }'

	# clean up
	rm -rf $temp_dir
	[ 0 -ne $? ] && return 1

	return 0
}

# arch_extract_package()
# purpose: extracts a package of the distribution into a directory
# input  : a package path and the destination directory
# output : -
arch_extract_package() {
	extract_tarball "$1" "$2"
}
