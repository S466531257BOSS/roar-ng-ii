# include the configuration file
. $CONF_DIR/distro/puppy

# a dummy package architecture field
PUPPY_PACKAGE_ARCH="any"

# the extension of PET package file names
PET_EXTENSION=".pet"

# the extensions for icon files placed under the package directory
ICON_EXTENSIONS=".xpm .png"

# the destination directory for icons moved from the package directory
ICONS_DIR="usr/share/pixmaps"

# the size of a MD5 hash, in bytes
MD5_SIZE=32

# unneeded files to remove from PET packages
PET_UNNEEDED_FILES="pet.specs puninstall.sh"

# the post-installation script name
PET_POST_INSTALL_FILE_NAME="pinstall.sh"

# puppy_get_architecture_aliases()
# purpose: translates an architecture name to the distribution's nicknames
# input  : an architecture name
# output : the distribution's names for the architecture, ordered by accuracy
puppy_get_architecture_aliases() {
	# Puppy package lists do not have an architecture field - it's up to the
	# user to decide which repositories to use - each contains packages for a
	# specific architecture; this field will be ignored - in order to switch
	# to another architecture, the repositories list has to be changed
	echo "$PUPPY_PACKAGE_ARCH"
}

# puppy_download_package_list()
# purpose: downloads the distribution's package list
# input  : the package list URL and the destination path
# output : -
puppy_download_package_list() {
	download_file "$1" "$2"
}

# puppy_convert_package_list()
# purpose: converts a repository's package list to roar-ng's common format
# input  : the package list path and the repository name
# output : a package list in roar-ng's format
puppy_convert_package_list() {
	awk -v distro="$distro_name" \
	    -v distro_version="$distro_version" \
	    -v repo="$2" \
	    -v arch="$PUPPY_PACKAGE_ARCH" \
	    -F \| '
	    {
	    	dependencies = "";

	    	# remove conflicting packages from the list of dependencies
	    	count = split($9, dependencies_split, ",");
	    	for (i = 1; count >= i; ++i) {
	    		if (dependencies_split[i] ~ "^-") {
	    			continue
	    		}
	    		sub(/^\+/, "", dependencies_split[i]);
	    		dependencies = (dependencies","dependencies_split[i])
	    	}

	    	# remove the leading comma
	    	sub(/^,/, "", dependencies);

	    	# size is specified in KB - remove the trailing "K" and convert it
	    	# to bytes
	    	sub(/K$/, "", $6);
	    	size = 1024 * $6

	    	printf("%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
	    	       $2,    # names, there is always one
	    	       $3,    # version
	    	       $4,    # revision, mostly empty
	    	       arch,  # architecture
	    	       $8,    # path
	    	       $10,   # description
	    	       # Puppy package lists specify a distribution, but sometimes
	    	       # it is the one the package was built against, not the Puppy
	    	       # derivative name
	    	       distro,
	    	       distro_version,
	    	       repo,
	    	       dependencies,
	    	       size)
	    }' "$1"
}

# puppy_extract_package()
# purpose: extracts a package of the distribution into a directory
# input  : a package path and the destination directory
# output : -
puppy_extract_package() {
	# create a temporary file
	temp_file="$(mktemp -u)"

	# a PET package is a tarball with an appended MD5 hash - strip it
	head -c -$MD5_SIZE "$1" > $temp_file
	if [ 0 -ne $? ]
	then
		[ -f $temp_file ] && rm -f $temp_file
		return 1
	fi

	# extract the tarball
	extract_tarball "$temp_file" "$2"
	exit_code=$?

	# delete the temporary file
	rm -f $temp_file
	[ 0 -ne $? ] && return 1

	# if the extraction failed, report an error
	[ 0 -ne $exit_code ] && return 1

	# strip the parent directory
	parent_directory="$(basename "$1" $PET_EXTENSION)"
	cp -a "$2/$parent_directory"/* "$2"
	[ 0 -ne $? ] && return 1
	rm -rf "$2/$parent_directory"
	[ 0 -ne $? ] && return 1

	# remove unneeded files
	for i in $PET_UNNEEDED_FILES
	do
		rm -f "$2/$i"
		[ 0 -ne $? ] && return 1
	done

	# move icons placed under the package directory to the icons directory
	for extension in $ICON_EXTENSIONS
	do
		for icon in "$2"/*$extension
		do
			[ "$2/*$extension" = "$icon" ] && break
			if [ ! -d "$2/$ICONS_DIR" ]
			then
				mkdir -p "$2/$ICONS_DIR"
				[ 0 -ne $? ] && return 1
			fi
			mv "$icon" "$2/$ICONS_DIR"
			[ 0 -ne $? ] && return 1
		done
	done

	# if no post-installation script exists, end here
	[ ! -f "$2/$PET_POST_INSTALL_FILE_NAME" ] && return 0

	# rename the post-installation script; it works the same way as a roar-ng II
	# one
	mv "$2/$PET_POST_INSTALL_FILE_NAME" "$2/$POST_INSTALL_SCRIPT_FILE_NAME"
	[ 0 -ne $? ] && return 1

	return 0
}
