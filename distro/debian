# include the configuration file
. $CONF_DIR/distro/debian

# the name of the tar archive containing files, within DEB packages
FILES_TARBALL_NAME="data.tar"

# debian_get_architecture_aliases()
# purpose: translates an architecture name to the distribution's nicknames
# input  : an architecture name
# output : the distribution's names for the architecture, ordered by accuracy
debian_get_architecture_aliases() {
	case "$1" in
		x86_64|amd64)
			echo "amd64 all"
			;;
		x86|i?86)
			echo "i386 all"
			;;
		armhf|arm7|armv7)
			echo "armhf all"
			;;
		arm*)
			echo "armel all"
			;;
	esac
}

# debian_download_package_list()
# purpose: downloads the distribution's package list
# input  : the package list URL and the destination path
# output : -
debian_download_package_list() {
	# download the package list
	download_file "$1" "$2"
	[ 0 -ne $? ] && return 1

	# decompress the package list
	decompress_file "$2"
	return $?
}

# debian_convert_package_list()
# purpose: converts a repository's package list to roar-ng's common format
# input  : the package list path and the repository name
# output : a package list in roar-ng's format
debian_convert_package_list() {
	awk -v distro="$distro_name" \
	    -v distro_version="$distro_version" \
	    -v repo="$2" \
	    -F ": " '
	    function print_entry() {
	    	printf("%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s\n",
	    	       names,
	    	       version,
	    	       revision,
	    	       arch,
	    	       file_name,
	    	       description,
	    	       distro,
	    	       distro_version,
	    	       repo,
	    	       dependencies,
	    	       size,
	    	       section);
	    }

	    {
	    	if ("Package" == $1) {
	    		names = $2
	    	} else {
	    		if ("Architecture" == $1) {
	    			arch = $2
	    		} else {
	    			if ("Version" == $1) {
	    				split($2, version_split, "-");
	    				version = version_split[1];
	    				revision = version_split[2]
	    			} else {
	    				if ("Provides" == $1) {
	    					gsub(/ /, "", $2);
	    					names = names","$2
	    				} else {
	    					if (("Depends" == $1) || ("Pre-Depends" == $1)) {
	    						# remove dependency versions
	    						gsub(/ \([^\)]*\)/, "", $2);
	    						# if there is an "or" relationship between
	    						# dependencies, leave only the first option
	    						gsub(/\|[^,]*/, "", $2);
	    						# strip spaces
	    						gsub(/ /, "", $2);
	    						if ("" == dependencies) {
	    							dependencies = $2
	    						} else {
	    							dependencies = dependencies","$2
	    						}
	    					} else {
	    						if ("Section" == $1) {
	    							section = $2;

	    							# strip the repository name
	    							sub(/.*\//, "", section)
	    						} else {
	    							if ("Filename" == $1) {
	    								file_name = $2
	    							} else {
	    								if ("Size" == $1) {
	    									size = $2
	    								} else {
	    									if ("Description" == $1) {
	    										description = $2
	    									} else {
	    										if (("" == $0) &&
	    										    ("" != names)) {
	    											print_entry();
	    											names = "";
	    											dependencies = ""
	    										}
	    									}
	    								}
	    							}
	    						}
	    					}
	    				}
	    			}
	    		}
	    	}
	    }

	    END {
	    	if ("" != names) {
	    		print_entry()
	    	}
	    }' "$1"
}

# debian_extract_package()
# purpose: extracts a package of the distribution into a directory
# input  : a package path and the destination directory
# output : -
debian_extract_package() {
	# if dpkg-deb is present, use it to extract the package
	if [ -n "$(which dpkg-deb)" ]
	then
		dpkg-deb -x "$1" "$2"
		[ 0 -ne $? ] && return 1
		return 0
	fi

	# otherwise, use ar and tar - first, get the files archive name
	files_tarball="$(ar t "$1" | grep $FILES_TARBALL_NAME)"
	[ 0 -ne $? ] && return 1

	# create a temporary file
	temp_file="$(mktemp -u)"

	# extract the files archive
	ar p "$1" $files_tarball > $temp_file
	[ 0 -ne $? ] && return 1

	# decompress the files archive
	decompress_file "$temp_file"
	if [ 0 -ne $? ]
	then
		rm -f $temp_file
		return 1
	fi

	# extract the files archive
	extract_tarball $temp_file "$2"
	is_success=$?
	rm -f $temp_file
	[ 0 -ne $is_success ] && return 1

	return 0
}
