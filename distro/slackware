# determine whether to use "slackware" or "slackware64"
suffix=""
case $distro_arch in
	x86_64)
		suffix="64"
		;;
esac

# include the configuration file
. $CONF_DIR/distro/slackware

# slackware_get_architecture_aliases()
# purpose: translates an architecture name to the distribution's nicknames
# input  : an architecture name
# output : the distribution's names for the architecture, ordered by accuracy
slackware_get_architecture_aliases() {
	case "$1" in
		x86_64|amd64)
			echo "x86_64 noarch x86"
			;;
		x86|i?86)
			echo "i486 noarch x86"
			;;
	esac
}

# slackware_download_package_list()
# purpose: downloads the distribution's package list
# input  : the package list URL and the destination path
# output : -
slackware_download_package_list() {
	# download the package list
	download_file "$1" "$2"
	[ 0 -ne $? ] && return 1

	# decompress the package list
	decompress_file "$2"
	return $?
}

# slackware_convert_package_list()
# purpose: converts a repository's package list to roar-ng's common format
# input  : the package list path and the repository name
# output : a package list in roar-ng's format
slackware_convert_package_list() {
	awk -v distro="$distro_name" \
	    -v distro_version="$distro_version" \
	    -v repo="$2" \
	    -F ":" '

	    # trims the beginning of a string
	    function trim(s) {
	    	sub(/^ */, "", s);
	    	return s
	    }

	    # prints a package list entry
	    function print_entry() {
	    	# split the name by "-"
	    	name_items = split(file_name, name, "-");

	    	# check if there are enough fields
	    	if (3 < name_items) {
	    		# strip the extension
	    		sub(/\..*/, "", name[name_items]);
	    		revision = name[name_items];

	    		# filter the version
	    		version = name[name_items - 2];

	    		# filter the architecture
	    		arch = name[name_items - 1];

	    		# add the rest of the fields to the package name and
	    		# remove the "-" at the beginning
	    		for (i = 1; name_items - 2 > i; i++) {
	    			package_name = package_name"-"name[i]
	    		}
	    		sub(/^-/, "", package_name)
	    		printf("%s|%s|%s|%s|%s/%s|%s|%s|%s|%s|%s|%s\n",
	    		       package_name, # in Slackware, each package has one name
	    		       version,
	    		       revision,
	    		       arch,
	    		       path,
	    		       file_name,
	    		       description,
	    		       distro,
	    		       distro_version,
	    		       repo,
	    		       dependencies,
	    		       size);
	    		package_name = "";
	    		file_name = "";
	    		dependencies = ""
	    	}
	    }
	    {
	    	if ($1 == "PACKAGE NAME") {
	    		file_name = trim($2);
	    	} else {
	    		if ($1 == "PACKAGE LOCATION") {
	    			path = trim($2);
	    			# trim and strip "./"
	    			sub(/^\.\//, "", path)
	    		} else {
					if ($1 == "PACKAGE SIZE (compressed)") {
						# convert the size from KB to bytes
						size = trim($2);
						sub(/ K/, "", size);
						size = 1024 * size
					} else {
						if ($1 == "PACKAGE REQUIRED") {
							# if there is an "or" relationship between two
							# dependencies, pick the first
							count = split(trim($2), dependencies_split, ",");
							for (i = 1; count >= i; i++) {
								sub(/[ \|].*/, "", dependencies_split[i]);
								dependencies = \
								          (dependencies","dependencies_split[i])
							}

							# remove the leading comma
							sub(/^,/, "", dependencies);
						} else {
							if ($1 == "PACKAGE DESCRIPTION") {
								getline description;
								description = trim(description);
								sub(/[^:]*: +/, "", description);
							} else {

								# when the empty line separator is reached,
								# print the current entry
								if ("" == $0 && "" != file_name) {
									print_entry()
								}
							}
						}
	    			}
	    		}
	    	}
	    } END {
	    	# when the end of the file is reached, print the current entry
	    	if ("" != file_name) {
	    		print_entry()
	    	}
	    }' "$1"
}

# slackware_extract_package()
# purpose: extracts a package of the distribution into a directory
# input  : a package path and the destination directory
# output : -
slackware_extract_package() {
	# extract the package
	extract_tarball "$1" "$2"
	[ 0 -ne $? ] && return 1

	# if a post-installation script exists, run it
	if [ -f "$2/install/doinst.sh" ]
	then
		cd "$2"
		chmod 755 ./install/doinst.sh
		./install/doinst.sh
		cd "$BASE_DIR"
	fi

	# remove the package metadata
	rm -rf "$2/install"
	[ 0 -ne $? ] && return 1

	return 0
}