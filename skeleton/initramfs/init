#!/bin/busybox ash

# /init: a system init script
# dependencies:
#   - Linux, with the following built-in:
#       - Aufs
#       - Squashfs
#       - Drivers for all block devices and file systems the distribution should
#         be able to boot from
#   - BusyBox (at /bin/busybox), with the following applets:
#       - ash
#       - mount, FEATURE_MOUNT_LABEL is unused
#       - cat
#       - sleep
#       - blkid
#       - grep
#       - cut
#       - cp
#       - umount
#       - mountpoint
#       - mkdir
#       - switch_root

# file systems to move to the union file system
VIRTUAL_FS="proc sys dev"

# the size of the tmpfs file system used as the writeable layer
TMPFS_SIZE="75%"

# the directory containing the kernel, the initramfs and other files required to
# boot the system
BOOT_DIR="boot"

# the main Squashfs image file name
MAIN_SFS_NAME="rootfs.sfs"

# show_error()
# purpose: displays a fatal error and terminates the boot process
# input  : the error message
# output : -
show_error()
{
	echo
	echo "Error: $1."
	/bin/busybox sleep 20
	exit 0
}

# find_root()
# purpose: locates and mounts the root partition
# input  : the root partition's mount point and the full path to the root file
#          system image and a boolean which indicates whether the root partition
#          should be mounted read-write
# output : -
find_root() {
	is_found=0

	echo -n "Searching for the root file system ..."

	for device in $(/bin/busybox blkid | /bin/busybox cut -f 1 -d :)
	do
		echo -n " ${device##*/}"

		# mount the device, read-only; upon failure, just skip it
		/bin/busybox mount -o ro "$device" "$1" > /dev/null 2>&1
		[ 0 -ne $? ] && continue

		# if the root file system image exists, make it read-write, break the
		# loop and keep the device mounted; if the remounting failed, the device
		# will be unmounted and ignored
		if [ -f "$2" ]
		then
			# if the file system should be mounted read-only, end here
			if [ 0 -eq $3 ]
			then
				is_found=1
				break
			fi

			# if the file system should be writeable, re-mount it
			/bin/busybox mount -o remount,rw "$device" "$1" > /dev/null 2>&1
			if [ 0 -eq $? ]
			then
				is_found=1
				break
			fi
		fi

		# unmount the device
		/bin/busybox umount "$1"
		[ 0 -ne $? ] && break
	done

	# terminate the printed line with a line break
	echo ""

	[ 1 -eq $is_found ] && return 0
	return 1
}

# clear the screen from the boot loader's output
/bin/busybox clear

# mount all virtual file systems
echo -n "Mounting virtual file systems ..."
/bin/busybox mount -t rootfs -o remount,rw rootfs /
/bin/busybox mount -t proc proc /proc
/bin/busybox mount -t sysfs sysfs /sys
/bin/busybox mount -t devtmpfs dev /dev
echo " done"

# the session is non-persistent, unless the "parsistent" boot code was passed
is_persistent=0

# by default, do not copy the root file system to RAM
should_copy=0

# parse the kernel command-line
for argument in $(/bin/busybox cat /proc/cmdline)
do
	case "$argument" in
		root=*)
			root="${argument#*=}"
			;;
		sleep=*)
			sleep="${argument#*=}"
			;;
		persistent)
			is_persistent=1
			;;
		copy)
			should_copy=1
			;;
	esac
done

# make sure copying to RAM is used only under live sessions
[ 1 -eq $should_copy ] && [ 1 -eq $is_persistent ] && \
      show_error "cannot copy the root file system to RAM under persistent mode"

# if the "sleep" argument was passed, sleep for the given number of seconds
case "$sleep" in
	"")
		;;

	[0-9]*)
		echo -n "Sleeping for $sleep second(s) ..."
		/bin/busybox sleep $sleep
		echo " done"
		;;

	*)
		show_error "an invalid sleep interval was specified"
		;;
esac

# if the root partition was specified by UUID, translate it into the device name
case "$root" in
	"")
		;;

	*-*-*-*-*)
		root="$(/bin/busybox blkid | \
		        /bin/busybox grep UUID=\"$root\" | \
		        /bin/busybox cut -f 1 -d :)"
		[ -z "$root" ] && show_error "the given root partition UUID is invalid"
		;;

	*)
		root="/dev/$root"
		;;
esac

# determine which mount point to use for the root file system - under
# non-persistent mode, use /mnt/root, but for persistent sessions, use /mnt/rw
if [ 1 -eq $is_persistent ]
then
	root_partition_mount_point="/mnt/rw"
else
	root_partition_mount_point="/mnt/root"
fi

# set the root file system image path - the root partition is always mounted, so
# it must exist
root_fs_path="$root_partition_mount_point/$BOOT_DIR/$MAIN_SFS_NAME"

# mount the root partition
if [ -z "$root" ]
then
	# if no root partition was specified explicitly, locate it by mounting all
	# partitions, one by one
	find_root "$root_partition_mount_point" "$root_fs_path" $is_persistent
	[ 0 -ne $? ] && show_error "failed to locate and mount the root partition"
else
	# otherwise, use the one specified via the "root" boot code
	/bin/busybox mount $root $root_partition_mount_point
	[ 0 -ne $? ] && show_error "failed to mount the root partition"
fi

# under non-persistent mode, mount a temporary, writeable file system under
# /mnt/rw, instead of the root file system
if [ 0 -eq $is_persistent ]
then
	/bin/busybox mount -t tmpfs -o size=$TMPFS_SIZE,rw tmpfs /mnt/rw
	[ 0 -ne $? ] && show_error "failed to mount a tmpfs file system"
fi

# if the root file system should be copied to RAM, copy the image from the root
# partition to /mnt/rw (the tmpfs file system - copying cannot be used under
# persistent sessions) and unmount the root partition
if [ 1 -eq $should_copy ]
then
	# copy the root file system image to the tmpfs file system
	echo -n "Copying the root file system to RAM ..."
	/bin/busybox cp -f "$root_fs_path" /mnt/rw
	[ 0 -ne $? ] && show_error "failed to copy the root file system to RAM"
	echo " done"

	# unmount the root partition
	echo -n "Unmounting the root partition ..."
	/bin/busybox umount $root_partition_mount_point
	[ 0 -ne $? ] && show_error "failed to unmount the root partition"
	echo " done"

	# replace the root file system image path with the copy's one
	root_fs_path="/mnt/rw/$MAIN_SFS_NAME"
fi

# mount the main Squashfs image under /mnt/ro, from either the root file system
# or from a copy under the tmpfs file system
echo -n "Mounting the root file system ..."
/bin/busybox mount "$root_fs_path" \
                   /mnt/ro \
                   -t squashfs \
                   -o loop,ro
[ 0 -ne $? ] && show_error "failed to mount the root file system image"
echo " done"

echo -n "Setting up a layered file system ..."

# create a union of the writeable file system (the root partition or the tmpfs)
# and the root file system (the Squashfs image), under /mnt/union
/bin/busybox mount -t aufs -o br=/mnt/rw=rw:/mnt/ro=ro aufs /mnt/union
[ 0 -ne $? ] && show_error "failed to set up the layered file system"

# move all mounted file systems to the union file system's /mnt
for file_system in ro rw root
do
	# if a mount point wasn't used, skip it - this happens with the root file
	# system's mount point (/mnt/root), which is unused under persistent mode
	/bin/busybox mountpoint -q /mnt/$file_system
	[ 1 -eq $? ] && continue

	# create a mount point under the union file system
	if [ ! -d /mnt/union/mnt/$file_system ]
	then
		/bin/busybox mkdir /mnt/union/mnt/$file_system
		[ 0 -ne $? ] && show_error "failed to create a mount point"
	fi

	# move the file system
	/bin/busybox mount --move /mnt/$file_system /mnt/union/mnt/$file_system
	[ 0 -ne $? ] && show_error "failed to set up the layered file system"
done

# also, move virtual file systems, so they don't have to re-mounted by the real
# init script
for file_system in $VIRTUAL_FS
do
	# if the mount point got accidently removed, restore it
	if [ ! -d /mnt/union/$file_system ]
	then
		/bin/busybox mkdir /mnt/union/$file_system
		[ 0 -ne $? ] && \
		           show_error "failed to create a mount point for /$file_system"
	fi

	# move the file system
	/bin/busybox mount --move /$file_system /mnt/union/$file_system
	[ 0 -ne $? ] && show_error "failed to set up the layered file system"
done

echo " done"

# switch to the union file system
exec /bin/busybox switch_root /mnt/union /sbin/init
show_error "failed to switch to the layered file system"
