#!/bin/dash

# /usr/sbin/buildpkg: a package building script
# dependencies: dash, tar, XZ Utils and roar-ng II

# usage: buildpkg download BUILD_SCRIPT (to download package sources)
# or:    buildpkg build    BUILD_SCRIPT (to build a package)

# the command-line usage message
USAGE="buildpkg [download|build] SCRIPT

Build a binary package, according to a build script."

# include the hpm configuration file, for PKG_EXTENSION
. /etc/hpmrc

# check the command-line arguments
if [ 2 -ne $# ] || [ ! -f "$2" ]
then
	echo "$USAGE"
	exit 1
fi

case "$1" in
	download|build)
		;;
	*)
		echo "$USAGE"
		exit 1
		;;
esac

# include the settings file; it will also include roar-ng
. /etc/buildpkgrc

# get the full build script path
path=$(realpath "$2")

# include the build script
. "$path"

# re-include the settings file
. /etc/buildpkgrc

# re-include the build script
. "$path"

# handle the "download" command
if [ "download" = "$1" ]
then
	# download the package source files
	for file in $PKG_SRC
	do
		download_file $file
		[ 0 -ne $? ] && exit 1
	done

	# if there's anything to do besides this, do it
	download
	[ 0 -ne $? ] && exit 1
	exit 0
fi

# handle the "build" command
INSTALL_DIR="$(mktemp -u -d)"

# build the package
build
if [ 0 -ne $? ]
then
	print_error "failed to build the package"
	exit 1
fi

# create the binary package
package
if [ 0 -ne $? ]
then
	print_error "failed to install the package"
	exit 1
fi

cd "$BASE_DIR"

# optimize the package
strippkg $INSTALL_DIR
if [ 0 -ne $? ]
then
	print_error "failed to optimize the package"
	exit 1
fi

# create the binary package; do not include the parent directory
make_tarball_and_delete $INSTALL_DIR \
                        "$BASE_DIR/$PKG_NAME-$PKG_VER-$PKG_REV.$PKG_EXTENSION" \
                        0
if [ 0 -ne $? ]
then
	print_error "failed to create the package"
	exit 1
fi

exit 0
